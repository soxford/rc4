/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Title: rc4Test.cpp
 * Author: Simon Campbell, <simonhmcampbell@gmai.com>
 * Description: Test for correctness of output of RC4Stream
 * License: GPL
 * Date: April 2015
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


#include <stdio.h>
#include <iostream>
#include <fstream>
#include <time.h>
#include "../MT19937_RandomSource.cpp"

using namespace std;

int main(int argc, const char *argv[])
{
   
   //assign space for the key;
   RC4Stream::Key *key = new RC4Stream::Key();
   //null check
   if (key == NULL) {
     cout << "Error: creation of key failed" << endl;
     return 1;
   }

   uint8_t keys[3][RC4Stream::Key::KEY_LENGTH] = 
                        {  { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
                           { 0x01, 0x23, 0x45, 0x67, 0x89, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20},
                           { 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00}, };

   //Target first 16 btes of output generated by the openssl rc4 command line tool for the keys above
   uint8_t targets[3][RC4Stream::Key::KEY_LENGTH] = 
                        {  { 0xe9, 0x9c, 0x40, 0xf9, 0x47, 0xe2, 0x19, 0xcc, 0x06, 0xdb, 0x97, 0xc6, 0x0e, 0xdd, 0x2a, 0x4f },
                           { 0x0b, 0x9c, 0x1a, 0xec, 0x15, 0x0e, 0x45, 0xa8, 0xa7, 0x43, 0xe7, 0xc1, 0xe7, 0x4a, 0x1f, 0x9b },
                           { 0x08, 0x46, 0x71, 0xc8, 0x83, 0x5e, 0xe8, 0xf9, 0x09, 0xa8, 0xb4, 0x8f, 0x7d, 0xd2, 0x15, 0xb3 } };
   //allocate space for the RC4 stream
   RC4Stream *rc4Stream = new RC4Stream();
   if (rc4Stream == NULL) {
      cout << "Error: failed to construct RC4Stream" << endl;
      return 1;
   }

   
   //variables for measuring clock usage
   clock_t begin, end;
   double time_spent;

   begin = clock();
   for (int i = 0; i < 3; i++) {
      //assign the key value
      for(int j = 0; j < RC4Stream::Key::KEY_LENGTH; j++) {
         key->setModuloLength(j, keys[i][j]);
      }
     //schedule key
     rc4Stream->keySchedule(key);
      
     //run RC4 stream algorithm and collect output in histogram counters
     for (int j = 0; j < 16; j++) {
        if(targets[i][j] != rc4Stream->PRGRound()){
            cout << "missmatch from target " << i << " in byte no. " << j << endl;
            return 1;
        }
     }
   }
   end = clock();
   time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
   cout << "Time spent sampling in seconds: " << scientific << time_spent << endl;
   cout << "Success: target stream match" << endl;
   //clean up
   delete rc4Stream;
   delete key;

   //close the file and return
   return 0;
}

