/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Title: rc4Test.cpp
 * Author: Simon Campbell, <simonhmcampbell@gmai.com>
 * Description: Test for correctness of output of RC4Stream
 * License: GPL
 * Date: April 2015
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


#include <stdio.h>
#include <iostream>
#include <fstream>
#include <time.h>
#include "MT19937_RandomSource.cpp"

using namespace std;

int main(int argc, const char *argv[])
{
   
   //assign space for the key;
   RC4Stream::Key *key = new RC4Stream::Key();
   //null check
   if (key == NULL) {
     cout << "Error: creation of key failed" << endl;
     return 1;
   }
   //assign the key value
   for(int i = 0; i < RC4Stream::Key::KEY_LENGTH; i++) {
      key->setModuloLength(i, (uint8_t) i);
   }
   //Target first 16 btes of output generated by the openssl rc4 command line tool for the key 000102030405060708090A0B0C0D0E0F
   uint8_t target[] = {0xe9, 0x9c, 0x40, 0xf9, 0x47, 0xe2, 0x19, 0xcc, 0x06, 0xdb, 0x97, 0xc6, 0x0e, 0xdd , 0x2a, 0x4f};
   //allocate space for the RC4 stream
   RC4Stream *rc4Stream = new RC4Stream();
   if (rc4Stream == NULL) {
      cout << "Error: failed to construct RC4Stream" << endl;
      return 1;
   }

   
   //variables for measuring clock usage
   clock_t begin, end;
   double time_spent;

   begin = clock();

  //schedule key
  rc4Stream->keySchedule(key);
   
  //run RC4 stream algorithm and collect output in histogram counters
  for (int i = 0; i < 16; i++) {
     if(target[i] != rc4Stream->PRGRound()){
         cout << "missmatch from target" << endl;
         return 1;
     }
  }

   end = clock();
   time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
   cout << "Time spent sampling in seconds: " << scientific << time_spent << endl;
   cout << "Success: target stream match" << endl;
   //clean up
   delete rc4Stream;
   delete key;

   //close the file and return
   return 0;
}

